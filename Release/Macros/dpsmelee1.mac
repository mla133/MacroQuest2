||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
|
| DPS Pet Caster - Farming and Looting - Master script
|
| Set the Pet Caster running this macro as the Group MA 
| 
|   Requires the following:
|   Hotkey2 - build a hotkey macro with a low and slow DPS rotation
|   Hotkey3 - /pet attack
|   Hotkey4 - build a hotkey macro with a heavy DPS burn rotation - NOT IMPLEMENTED YET
|   Hotkey6 - /assist %tankname (put the real tank name in plz)
|   Hotkey9 - /Sit
|   Active Pet for pulling targets
|   Requires you to SET ROLES for Main Tank and Main Assist. <<-- Very Important!
|   
|   This macro has 3 startup parameter:
|  Param1 - search radius for mobs (think in terms of feet on a scale basis)
|  Param2 - 1 if you would like to set your current position as the "Sticky" point. 0 or blank to ignore sticky
|
|  Example startup: /macro dpscaster 150 1
|      The above startup will actively scan a 150 foot radius around the char based on
|       whatever your current location is and attack anything that has a partial name
|       match for whatever names you specified in the ini file.
|
|  This macro will loot the nearest corpse to the player that has a partial name match
|     to the currently active target name, approach it and loot all items unless limits or
|     zeros are set in the DPSCaster.ini file.
|
|    Props to the Forage and Farm macros had been modified by many people.
|    Props also to zizak51 for his easy to use being attacked sub-routine Logic
|
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

#event Farm_talk "#*#tells you#*#"
#event We_Died "#*#entered The Plane of Knowledge#*#"
#event Check_Damage "#*# hits YOU for#*#"
#event Check_Damage "#*# mauls YOU for#*#"
#event Check_Damage "#*# bashes YOU for#*#"
#event Exp "You gain#*#experience#*#"
#event Stickin "#*# tell your party,'Camping here#*#"

#turbo

Sub Main
/declare CurrentWP int outer 1
/declare wpx[20] float outer
/declare wpy[20] float outer
/declare stickyon int outer ${Param1}
/declare HaveMoved int outer
/declare PrctExp float outer
/declare PrctAAExp float outer
/declare Exper float outer
/declare Exper1 float outer
/declare Exper2 float outer
/declare AAExp float outer
/declare Expstart float outer
/declare AAstart float outer
/declare targ1 string outer
/declare targ2 string outer
/declare targ3 string outer
/declare targ4 string outer
/declare targ5 string outer
/declare dist int outer ${Param0}
/declare locy float outer
/declare locx float outer
/declare mob string outer
/declare i int local
/declare AlertTank string outer FALSE
/declare UnderAttack string outer FALSE
/varset HaveMoved 0
/varset PrctExp 0
/varset PrctAAExp 0
/varset Exper ${Me.PctExp}
/varset Exper1 0
/varset Exper2 0
/varset AAExp ${Me.PctAAExp}
/varset Expstart ${Me.Exp}
/varset AAstart ${Me.PctAAExp}
/varset targ1 ${Ini[DPSCaster.ini,MobList,name1]}
/varset targ2 ${Ini[DPSCaster.ini,MobList,name2]}
/varset targ3 ${Ini[DPSCaster.ini,MobList,name3]}
/varset targ4 ${Ini[DPSCaster.ini,MobList,name4]}
/varset targ5 ${Ini[DPSCaster.ini,MobList,name5]}
/varset mob ${targ1}
|====  Check if the Sticky flag has been set ====
   /call Event_Stickin
   /moveto loc ${locy} ${locx}
   :startpoint
   /squelch /target clear 
   /delay 2s
   /call CheckCombat
   /if (${UnderAttack.Equal[TRUE]}) /call Combat
   /if (${UnderAttack.Equal[FALSE]}) /call CheckLoot
   /call CheckCombat
   /if (${UnderAttack.Equal[TRUE]}) /call Combat
|====  Move to sticky point if not already in combat ====
   /if (${Me.XTarget}==0 && !${Me.Sitting} && ${locy}!=0 && ${HaveMoved}==1) {
      /moveto loc ${locy} ${locx}
      /varset HaveMoved 0
      /delay 3s
   }
   /call CheckCombat
   /if (${UnderAttack.Equal[TRUE]}) /call Combat
|====  MED BREAK
|====   /delay 10s ${Me.XTarget}>0
   /call PartyCheck
   /if (${UnderAttack.Equal[FALSE]}) /call FindMob
   /if (!${Target.ID}) {
      /delay 5s
   }

|====  Attack Selected Target  if not already in combat ====
   /if (${Target.ID}>0 && ${Me.XTarget}==0) {
     /call Combat
   }
   /if (${UnderAttack.Equal[TRUE]}) /call Combat
   /doevents
   /goto :startpoint
/return   

Sub PartyCheck
   /squelch /target clear
   /declare mana float local
   /declare i int local
   | Target a party member (cycle?)
   /for i 1 to ${Group.Members}
   /target ${Group.Member[${i}]}
   /delay 1s
   | Is target alive?
   /if (${Target.PctHPs}<50) {
      :hploop 
      /delay 5s
      /call CheckCombat
      /if (${UnderAttack.Equal[TRUE]}) /call Combat
      /delay 1s
      /target ${Group.GroupMember[${i}]}
      /delay 1s
      /if (${Target.PctHPs}<50) /goto :hploop
   }
   | Do casters have enough mana?
   /if (${Target.Class.CanCast}) {
      /if (!${Target.MaxMana}>0) {
         /echo No mana showing
         /goto :endpartycheck
      }
      /if (${Target.ID}>0) {
         /varcalc mana ${Target.CurrentMana}/${Target.MaxMana}
         /if (${mana}<.50) {
            :manaloop
            /delay 5s
            /call CheckCombat
            /if (${UnderAttack.Equal[TRUE]}) /call Combat
            /delay 1s
            /if (${Target.ID}>0) {
               /varcalc mana ${Target.CurrentMana}/${Target.MaxMana}
               /if (${mana}<.50) /goto :manaloop
            }
         }
      }
   }
   :endpartycheck
   /next i
   /squelch /target clear
   /delay 1s
/return

Sub Logging
   /gsay Guys I got to log.
   /delay 2s
   /camp
   /endmac
/return

Sub Wait4Rez
   /declare i int local
   /varset i 1
   :rezwait
   /varcalc i ${i}+1
   /if (!${Window[ConfirmationDialogBox].Open}) {
      /delay 5s ${Window[ConfirmationDialogBox].Open}
      /if (${i}<=80) /goto :rezwait
      /call Logging
   }
   /if (${Window[ConfirmationDialogBox].Open}) /notify ConfirmationDialogBox Yes_Button leftmouseup
   /delay 2s
   /if (${Window[RespawnWnd].Open}) /nomodkey /notify RespawnWnd RW_OptionsList listselect 2  
   /delay 1s
   /nomodkey /notify RespawnWnd RW_SelectButton leftmouseup
   /delay 2s
/return

Sub DeathCheck
   /if (${Me.State.Equal[HOVER]}) {
      /gsay I died, Waiting for rez plz
      /call Wait4Rez
   }
/return

Sub Event_Stickin
   /if (${stickyon}==2) {
      /declare i int local 1
      /echo Setting waypoints...
      /for i 1 to 20
        /varset wpx[${i}] ${Ini[DPSCaster.ini,Waypoints,wpx${i}]}
        /echo Setting WP${i}x ${wpx[${i}]}
        /varset wpy[${i}] ${Ini[DPSCaster.ini,Waypoints,wpy${i}]}
        /echo Setting WP${i}y ${wpy[${i}]}
      /next i
      /varset locy ${wpy[1]}
      /varset locx ${wpx[1]}
   }
   /if (${stickyon}==1) {
      /echo Setting location ${Me.Y} ${Me.X}
      /varset locy ${Me.Y}
      /varset locx ${Me.X}      
   }
/return

Sub Event_Exp
   /declare RunTime int local
   /declare RunTime1 float local
   /varset RunTime1 0
   /varcalc RunTime ${Macro.RunTime}/60
| Exper = XP from last Kill
   /varcalc Exper ${Me.Exp}-${Exper}
| Exper2 is running total of XP gained since start
   /varcalc Exper2 ${Exper2}+${Exper}
| PrctExp is the Percent left to level
   /varcalc PrctExp 100-${Me.PctExp}
   /varcalc RunTime1 ${RunTime}/60
   /if (${RunTime1}<.01) /varset RunTime1 .01
|Exper1 is Approx XP per hour
   /varcalc Exper1 ${Exper2}/${RunTime1}
   /echo [Last Kill]: ${Exper} [Total EXP]: ${Exper2} in [${RunTime}] Minutes...
   /echo [%EXP to level]: ${PrctExp}%   [Exp per hr]: ${Exper1}
/return

Sub Event_Check_Damage
   /gsay ${Target.CleanName} is attacking me!! Get it off!
   /call MoveBack
   /doevents flush Check_Damage
   /call CheckCombat
/return

Sub FindMob
   /varset mob ${targ1}
   :targetloop
   /squelch /target npc radius ${dist} zradius 50 ${mob} los
   /if (!${Target.ID}) {
      /if (${mob.Equal[${targ1}]}) {
         /varset mob ${targ2}
         /goto :targetloop
      }
      /if (${mob.Equal[${targ2}]}) {
         /varset mob ${targ3}
         /goto :targetloop
      }
      /if (${mob.Equal[${targ3}]}) {
         /varset mob ${targ4}
         /goto :targetloop
      }
      /if (${mob.Equal[${targ4}]}) {
         /varset mob ${targ5}
         /goto :targetloop
      }
      /if (${mob.Equal[${targ5}]}) {
         /varset mob ${targ1}
      }
   }
   /if (${Target.ID}) /face fast
   /if (!${Target.ID} && ${stickyon}==2) {
      /varcalc CurrentWP ${CurrentWP}+1
      :RestartWP
      /varset locy ${wpy[${CurrentWP}]}
      /varset locx ${wpx[${CurrentWP}]}
      /if (${locy}==0) {
         /varset CurrentWP 1
         /goto :RestartWP
      }
   }
   /squelch /moveto loc ${locy} ${locx}
   /delay 5s
/return

Sub GetCombatTarget
   /target ${Me.XTarget[1]}
   /delay 1s
| ========= Set Hotkey 6 to Assist the main tank =========
   /if (!${Target.ID} || ${Target.Type.Equal[corpse]}) {
      /keypress 6
      /delay 1s
   }
| ========= Last Resort - We know something is there so lets just blindly swing at it =========
   /if (!${Target.ID} || ${Target.Type.Equal[corpse]}) {
   /if (!${Me.XTarget}>0) /goto :notarget
      /keypress F8
      /delay 1s
   }
   /varset mob ${Target.CleanName}
   :notarget
/return

Sub CheckCombat
   /call DeathCheck
   /if (${Me.XTarget}>0) {
      /if (!${Target.ID} || ${Target.Type.Equal[corpse]}) {
         /call GetCombatTarget
      }
      /varset UnderAttack TRUE
      /if (${Me.Sitting}) /stand
      /return
   }
   /varset UnderAttack FALSE
/return

Sub MoveBack
   /face fast
   /keypress back hold
   /delay 2s
   /keypress back
   /squelch /target clear 
   /delay 5s
   /call ApproachTarget
/return

Sub ApproachTarget
   /if (${Target.Distance}>10) {
      /face fast nolook
      /keypress forward hold
      :moveloop
      /if (${Target.ID}) /face fast nolook
      /if (${Target.Distance}>10) /goto :moveloop
      /keypress forward
   } 
/return

Sub Combat
   /varset HaveMoved 1
   /declare i int local
   /if (${Target.Distance}<20) {
      /face fast
      /keypress back hold
      /delay 1s
      /keypress back
   }
   /delay 1s
   /keypress 2
   /delay 3s
   /doevents Check_Damage
   /delay 2s
   :combatloop
   /call CheckCombat
      /if (${UnderAttack.Equal[FALSE]}) /goto :endcombat
      /if (!${Target.ID}) /call GetCombatTarget
      /call ApproachTarget
      /stick behind
      /delay 2s
      /attack on
      /delay 1s  
      /doevents Check_Damage
      /call CheckCombat
      /delay 5s
      /doevents Check_Damage
      /keypress 2
      /delay 3s
      /doevents Check_Damage
      /goto :combatloop
   :endcombat
/return

Sub CheckLoot
   /echo Checking for lewtz
   /declare x int local
   /declare i int local
   /varset i 1
|   /target corpse radius ${dist} ${mob}
   /target corpse radius ${dist} los
   /delay 1s
   /if (!${Target.ID}) /varset mob ${targ1}
   /if (!${Target.Type.Equal[corpse]}) /return
   /call CheckCombat
   :multiloot
   /if (${UnderAttack.Equal[TRUE]}) /return
|   /squelch /target corpse radius ${dist} ${mob}
   /squelch /target corpse radius ${dist}
   /if (!${Target.Type.Equal[corpse]}) /return
   /if (!${Target.ID}) {
      /if (${mob.Equal[${targ1}]}) {
         /varset mob ${targ2}
         /goto :multiloot
      }
      /if (${mob.Equal[${targ2}]}) {
         /varset mob ${targ3}
         /goto :multiloot
      }
      /if (${mob.Equal[${targ3}]}) {
         /varset mob ${targ4}
         /goto :multiloot
      }
      /if (${mob.Equal[${targ4}]}) {
         /varset mob ${targ5}
         /goto :multiloot
      }
      /if (${mob.Equal[${targ5}]}) {
         /varset mob ${targ1}
         /return
      }
   }
   /echo Should return if no loot targets
   /if (!${Target.ID}) /return
   /if (!${Me.FreeInventory}) {
      /beep
      /endmac
   }
   /face fast
   /if (${Target.Distance}>14) {
      /face fast nolook
      /keypress forward hold
      :moveloop
      /if (${Target.ID}) /face fast nolook
      /if (${Target.Distance}>8) /goto :moveloop
      /keypress forward
   }
   /loot 
   /delay 1s
   /for x 1 to 6
      /itemnotify loot${x} leftmouseup
|      /if (!${Cursor.ID}) /goto :EndLoot
      /nomodkey   /notify QuantityWnd QTYW_Accept_Button leftmouseup   
      /nomodkey   /notify ConfirmationDialogBox Yes_Button leftmouseup   
      /delay 1s
      /if (!${Ini[DPSCaster.ini,LootList,${Cursor.Name}].Length}) {
         /ini "DPSCaster.ini" "LootList" "${Cursor.Name}" "-1"
      } else {
      /if (${Ini[DPSCaster.ini,LootList,${Cursor.Name}]}) {
         /if (${FindItemCount["=${Cursor.Name}"]}>=${Ini[DPSCaster.ini,LootList,${Cursor.Name}]} && ${Ini[DPSCaster.ini,LootList,${Cursor.Name}]}!=-1) /goto :Destroy
      } else {
         :Destroy
         /destroy
         /next x
         }
      }
      :LootIt
      /autoinventory
      /if (${Cursor.ID}) /goto :LootIt
   } 
   /next x
   :EndLoot
   /delay 1s
   /notify LootWnd DoneButton leftmouseup 
   /target clear
   /delay 2s
   /look
|   /target corpse radius ${dist} ${mob}
   /target corpse radius ${dist} los
| Inserting a check to ensure we dont loop on a corpse more than 3 times. Lore items etc.
   /varcalc i ${i}+1
   /if (${Target.ID} && ${i}<3) /goto :multiloot
   /squelch /target clear
   /squelch /moveto loc ${locy} ${locx}
   /delay 2s
/return

Sub Event_Farm_talk
   /if (${afkset}) {
      /camp
      /endmac
   }
/return

Sub Event_We_Died
   /gsay Logging
   /camp
   /endmac
/return

Sub MedBreak
   /gsay Medding
   /keypress 9
   :medloop
   /call CheckCombat
   /if (${UnderAttack.Equal[TRUE]}) /return
   /if (!${Me.Sitting}) /sit
   /delay 5s
   /if (${Me.PctMana}<95) /goto :medloop
/return